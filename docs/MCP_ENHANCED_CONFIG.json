{
  "_comment": "Enhanced MCP Server Configuration for SommOS (Yacht Wine Management System)",
  "_instructions": [
    "1. Backup current config: cp ~/Library/Application\\ Support/Warp/mcp_config.json ~/Library/Application\\ Support/Warp/mcp_config.json.backup",
    "2. Copy this file: cp docs/MCP_ENHANCED_CONFIG.json ~/Library/Application\\ Support/Warp/mcp_config.json",
    "3. Remove _comment and _instructions fields from the copied file",
    "4. Restart Warp: Cmd+Q then reopen",
    "5. Test with: 'List files in backend/api' in Warp AI chat"
  ],
  "mcpServers": {
    "filesystem": {
      "command": "mcp-server-filesystem",
      "args": [
        "/Users/thijs/Documents/SommOS"
      ],
      "env": {
        "PROJECT_NAME": "SommOS",
        "PROJECT_TYPE": "wine_management_pwa",
        "NODE_ENV": "development"
      },
      "_notes": [
        "Provides full read/write access to SommOS project directory",
        "Automatically filters out node_modules and .git",
        "Safe for editing source code, configs, and documentation",
        "DO NOT use to edit .env files with secrets"
      ]
    },
    
    "sequential-thinking": {
      "command": "mcp-server-sequential-thinking",
      "args": [],
      "env": {
        "THINKING_MODE": "development",
        "PROJECT_CONTEXT": "sommos_wine_management",
        "DEBUG_LEVEL": "verbose"
      },
      "_notes": [
        "Enables systematic problem-solving for complex debugging",
        "Ideal for analyzing wine pairing algorithms",
        "Useful for authentication flow debugging",
        "Helps plan new features with step-by-step analysis"
      ],
      "_use_cases": [
        "Debug: 'Why is the JWT token not being set in cookies?'",
        "Analyze: 'Explain how the offline sync mechanism works'",
        "Plan: 'How should we implement real-time inventory updates?'",
        "Optimize: 'Find performance bottlenecks in the pairing engine'"
      ]
    },
    
    "memory": {
      "command": "mcp-server-memory",
      "args": [],
      "env": {
        "MEMORY_SCOPE": "project",
        "PROJECT_NAME": "SommOS"
      },
      "_notes": [
        "Maintains context across Warp AI sessions",
        "Stores architectural decisions and patterns",
        "Remembers common debugging solutions",
        "Tracks code review checklists and standards"
      ],
      "_important_memories": [
        "Primary AI provider: DeepSeek with OpenAI fallback",
        "Database: SQLite for offline-first architecture",
        "API ports: Backend 3001 (dev) / 3000 (prod), Frontend 5173",
        "Authentication: JWT with httpOnly cookies, bcrypt passwords",
        "Testing: Jest with 80% coverage requirement",
        "Deployment: Docker containers with nginx reverse proxy"
      ],
      "_use_cases": [
        "Store: 'Remember that all API endpoints need rate limiting'",
        "Recall: 'What was the solution to the CORS issue?'",
        "Track: 'Remember our database migration strategy'",
        "Reference: 'What are our code review standards?'"
      ]
    },
    
    "github": {
      "command": "mcp-server-github",
      "args": [],
      "env": {
        "GITHUB_PERSONAL_ACCESS_TOKEN": "$GITHUB_PERSONAL_ACCESS_TOKEN"
      },
      "_notes": [
        "Enables GitHub operations (issues, PRs, repos)",
        "Requires GITHUB_PERSONAL_ACCESS_TOKEN environment variable",
        "Useful for creating issues, reviewing PRs, checking CI status"
      ]
    },
    
    "playwright": {
      "command": "mcp-server-playwright",
      "args": [],
      "env": {},
      "_notes": [
        "Browser automation for E2E testing",
        "Useful for testing PWA offline functionality",
        "Can automate wine inventory UI testing",
        "Helpful for visual regression testing"
      ],
      "_use_cases": [
        "Test: 'Test the wine search functionality with Playwright'",
        "E2E: 'Create an E2E test for the login flow'",
        "Validate: 'Test offline mode with service worker'"
      ]
    }
  },
  
  "_sommos_specific_notes": {
    "project_structure": {
      "backend": "Express API server (Node.js)",
      "frontend": "Vanilla JS PWA with offline-first architecture",
      "frontend-react": "Alternative React implementation",
      "database": "SQLite at ./data/sommos.db",
      "tests": "Jest test suites with multiple categories",
      "scripts": "Utility scripts for migration, seeding, setup",
      "deployment": "Docker + nginx configuration"
    },
    
    "key_technologies": {
      "runtime": "Node.js v20+",
      "backend_framework": "Express v5",
      "ai_providers": ["DeepSeek (primary)", "OpenAI (fallback)"],
      "database": "SQLite 3 with migrations",
      "authentication": "JWT + bcrypt",
      "testing": "Jest + Supertest",
      "containerization": "Docker + docker-compose"
    },
    
    "security_considerations": {
      "never_expose": [
        "DEEPSEEK_API_KEY",
        "OPENAI_API_KEY", 
        "JWT_SECRET",
        "SESSION_SECRET"
      ],
      "safe_to_read": [
        ".env.example",
        ".env.template",
        "package.json",
        "docker-compose.yaml"
      ],
      "never_edit_directly": [
        ".env (contains secrets)",
        "data/*.db (use migrations)",
        "node_modules/*"
      ]
    },
    
    "common_tasks": {
      "start_dev": "npm run dev",
      "run_tests": "npm test",
      "migrate_db": "npm run migrate",
      "seed_data": "npm run seed",
      "deploy_prod": "./deployment/deploy.sh",
      "check_coverage": "npm test -- --coverage"
    },
    
    "api_endpoints": {
      "base_url": "http://localhost:3001/api",
      "auth": "/auth/login, /auth/register, /auth/invite",
      "inventory": "/inventory, /inventory/:id, /inventory/stock",
      "pairing": "/pairing/quick, /pairing/analyze",
      "procurement": "/procurement/suggest",
      "vintage": "/vintage/weather"
    }
  },
  
  "_recommended_prompts": {
    "debugging": [
      "Debug the CORS error between frontend and backend",
      "Why is the JWT token not being refreshed correctly?",
      "Trace the authentication flow from login to API access",
      "Find the root cause of the 500 error in pairing endpoint"
    ],
    
    "code_review": [
      "Review the wine pairing algorithm for optimization opportunities",
      "Check the authentication middleware for security vulnerabilities",
      "Analyze test coverage for the inventory manager",
      "Review error handling patterns across API routes"
    ],
    
    "feature_development": [
      "Create a new API endpoint for wine recommendations",
      "Add real-time inventory updates via WebSocket",
      "Implement temperature monitoring for wine cellars",
      "Add export functionality for tasting notes"
    ],
    
    "testing": [
      "Generate test cases for the procurement engine",
      "Create integration tests for the auth flow",
      "Add E2E tests for the wine search functionality",
      "Review test coverage and suggest improvements"
    ],
    
    "documentation": [
      "Generate API documentation for all endpoints",
      "Document the database migration process",
      "Explain the deployment workflow step-by-step",
      "Create a troubleshooting guide for common issues"
    ],
    
    "performance": [
      "Optimize database queries in the inventory manager",
      "Analyze and improve the wine search performance",
      "Review the pairing algorithm for bottlenecks",
      "Suggest caching strategies for API responses"
    ]
  },
  
  "_warp_ai_tips": {
    "effective_prompts": [
      "Be specific about file paths when possible",
      "Ask to 'remember' important decisions for future reference",
      "Request step-by-step analysis for complex debugging",
      "Combine multiple servers: 'Plan with sequential thinking, then implement'",
      "Use project context: 'Review using our coding standards'"
    ],
    
    "best_practices": [
      "Start broad, then narrow down: 'Review auth → Focus on JWT handling'",
      "Build up memory: Store patterns, decisions, and solutions",
      "Use filesystem for code, sequential-thinking for analysis",
      "Combine tools: 'Analyze with sequential-thinking, then remember the solution'",
      "Iterate: Review → Implement → Test → Document"
    ],
    
    "avoid": [
      "Don't ask to edit .env files directly",
      "Don't modify database files without migrations",
      "Don't commit AI-generated secrets to git",
      "Don't expose API keys in code or logs"
    ]
  }
}
