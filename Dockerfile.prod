# Production Dockerfile for SommOS
# Multi-stage build: Stage 1 - Build frontend and prepare dependencies
FROM node:20-alpine AS builder

# Set working directory
WORKDIR /app

# Install build dependencies (needed for native modules and build tools)
RUN apk add --no-cache make gcc g++ python3 curl

# Copy package files for both root and frontend
COPY package*.json ./
COPY frontend/package*.json ./frontend/

# Install ALL dependencies (including devDependencies for build tools)
# Root dependencies include backend and shared tools
RUN npm ci && \
    npm rebuild sqlite3

# Install frontend dependencies (vite, workbox-build, autoprefixer)
RUN cd frontend && npm ci

# Copy all application code
COPY . .

# Build the frontend (creates frontend/dist directory)
RUN npm run build

# Verify frontend build succeeded
RUN test -d frontend/dist || (echo "ERROR: Frontend build failed - frontend/dist not found" && exit 1)

# Copy static files that Vite doesn't automatically handle
RUN mkdir -p /app/frontend/dist/js /app/frontend/dist/icons && \
    cp frontend/js/config.js /app/frontend/dist/js/config.js 2>/dev/null || echo "Warning: config.js not found" && \
    cp frontend/icons/*.svg /app/frontend/dist/icons/ 2>/dev/null || echo "Warning: icons not found"

# Multi-stage build: Stage 2 - Production image with only runtime dependencies
FROM node:20-alpine AS production

# Set working directory
WORKDIR /app

# Ensure runtime defaults align with production deployment expectations
ENV NODE_ENV=production

# Install runtime dependencies and curl for healthcheck
RUN apk add --no-cache make gcc g++ python3 curl

# Copy package files
COPY package*.json ./

# Install only production dependencies
RUN npm ci --omit=dev && \
    npm rebuild sqlite3 && \
    npm cache clean --force

# Copy backend code from builder
COPY --from=builder /app/backend ./backend
COPY --from=builder /app/data ./data

# Copy built frontend from builder (all built assets are in frontend/dist)
COPY --from=builder /app/frontend/dist ./frontend/dist

# Create non-root user
RUN addgroup -g 1001 -S sommuser && \
    adduser -S sommuser -u 1001 -G sommuser

# Create directories and set permissions
RUN mkdir -p /app/data /app/logs && \
    chown -R sommuser:sommuser /app

# Switch to non-root user
USER sommuser

# Expose port (actual port is configured via the PORT environment variable at runtime)
EXPOSE 3000

# Health check relies on runtime PORT value
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
  CMD ["sh", "-c", "curl -f http://localhost:${PORT:-3000}/api/system/health || exit 1"]

# Start application
CMD ["node", "backend/server.js"]
