openapi: 3.0.3
info:
  title: SommOS API
  version: 1.0.0
  description: |
    Canonical contract for the SommOS yacht wine management platform. All
    endpoints are prefixed with `/api` and return JSON payloads.
servers:
  - url: /api
    description: Internal Express server base path
components:
  schemas:
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: string
          description: Stable machine-readable error identifier.
        message:
          type: string
          description: Human friendly explanation of the error.
        details:
          description: Optional structured error context.
          oneOf:
            - type: string
            - type: object
            - type: array
    ErrorResponse:
      type: object
      required:
        - success
        - error
      properties:
        success:
          type: boolean
          const: false
        error:
          $ref: '#/components/schemas/Error'
    Pagination:
      type: object
      properties:
        total:
          type: integer
          minimum: 0
        limit:
          type: integer
          minimum: 0
        offset:
          type: integer
          minimum: 0
    PairingRecommendation:
      type: object
      properties:
        wine:
          type: object
          description: Wine record selected for the pairing.
          additionalProperties: true
        score:
          type: object
          description: Detailed scoring metrics.
          additionalProperties:
            type: number
        reasoning:
          type: string
        ai_enhanced:
          type: boolean
        learning_session_id:
          type: string
        learning_recommendation_id:
          type: string
    QuickPairing:
      type: object
      properties:
        wine:
          type: object
          additionalProperties: true
        reasoning:
          type: string
        confidence:
          type: number
    InventoryRecord:
      type: object
      description: Inventory item enriched with guidance metadata.
      additionalProperties: true
    InventoryLedgerEntry:
      type: object
      additionalProperties: true
    IntakeReceipt:
      type: object
      additionalProperties: true
    ProcurementOpportunity:
      type: object
      additionalProperties: true
    ProcurementOrder:
      type: object
      additionalProperties: true
    Wine:
      type: object
      additionalProperties: true
    VintageAnalysis:
      type: object
      additionalProperties: true
    ActivityEvent:
      type: object
      properties:
        id:
          type: string
        type:
          type: string
        title:
          type: string
        details:
          type: string
        timestamp:
          type: string
          format: date-time
    User:
      type: object
      properties:
        id:
          type: integer
        email:
          type: string
          format: email
        role:
          type: string
          enum: [admin, crew, guest]
        created_at:
          type: string
          format: date-time
        last_login:
          type: string
          format: date-time
          nullable: true
    Invite:
      type: object
      properties:
        token:
          type: string
        email:
          type: string
          format: email
        role:
          type: string
          enum: [admin, crew, guest]
        expires_at:
          type: string
          format: date-time
        requires_pin:
          type: boolean
  securitySchemes:
    accessTokenCookie:
      type: apiKey
      in: cookie
      name: sommos_access_token
      description: >-
        Short-lived JWT issued after authentication. Required for protected mutations.
    refreshTokenCookie:
      type: apiKey
      in: cookie
      name: sommos_refresh_token
      description: >-
        Long-lived refresh token stored as an HttpOnly cookie. Used only with the refresh endpoint.
paths:
  /guest/session:
    post:
      tags: [Auth]
      summary: Issue a temporary guest session using an event code.
      description: |
        Establishes a time-limited guest session by validating an admin issued guest invite
        or event code. On success the response sets httpOnly access and refresh token cookies
        scoped to read-only permissions.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                event_code:
                  type: string
                  description: Guest invite or event code shared by the crew.
                invite_token:
                  type: string
                  description: Legacy field alias for `event_code`.
                pin:
                  type: string
                  description: Optional PIN required when configured on the invite.
              anyOf:
                - required: [event_code]
                - required: [invite_token]
      responses:
        '201':
          description: Guest session created; authentication cookies issued.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    const: true
                  data:
                    $ref: '#/components/schemas/User'
                  meta:
                    type: object
                    properties:
                      access_token_expires_in:
                        type: integer
                        description: Access token expiration window in seconds.
                      refresh_token_expires_in:
                        type: integer
                        description: Refresh token expiration window in seconds.
        '400':
          description: Missing required event code or PIN validation failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Provided PIN does not match the invite.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Event code not found or expired.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Guest session could not be created due to a server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /auth/register:
    post:
      tags: [Auth]
      summary: Provision the initial administrator account.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  minLength: 8
      responses:
        '201':
          description: Administrator account created.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    const: true
                  data:
                    $ref: '#/components/schemas/User'
        '403':
          description: Registration disabled when an account already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Email already registered.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /auth/login:
    post:
      tags: [Auth]
      summary: Authenticate a user and issue cookies.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
      responses:
        '200':
          description: Login succeeded.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    const: true
                  data:
                    $ref: '#/components/schemas/User'
        '401':
          description: Invalid credentials.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /auth/logout:
    post:
      tags: [Auth]
      summary: End the active session and clear cookies.
      security:
        - accessTokenCookie: []
      responses:
        '200':
          description: Logout successful.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    const: true
                  message:
                    type: string
        '401':
          description: Authentication required.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /auth/refresh:
    post:
      tags: [Auth]
      summary: Rotate session tokens using the refresh cookie.
      security:
        - refreshTokenCookie: []
      responses:
        '200':
          description: Session refreshed.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    const: true
                  data:
                    $ref: '#/components/schemas/User'
        '401':
          description: Refresh token missing or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /auth/invite:
    post:
      tags: [Auth]
      summary: Issue a role-based invite link.
      security:
        - accessTokenCookie: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, role]
              properties:
                email:
                  type: string
                  format: email
                role:
                  type: string
                  enum: [admin, crew, guest]
                expires_in_hours:
                  type: integer
                  minimum: 1
                pin:
                  type: string
      responses:
        '201':
          description: Invite created.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    const: true
                  data:
                    $ref: '#/components/schemas/Invite'
        '400':
          description: Invalid invite request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Authentication required.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /auth/accept-invite:
    post:
      tags: [Auth]
      summary: Exchange an invite for an authenticated session.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [token]
              properties:
                token:
                  type: string
                password:
                  type: string
                pin:
                  type: string
      responses:
        '200':
          description: Invite accepted.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    const: true
                  data:
                    $ref: '#/components/schemas/User'
        '400':
          description: Invalid invite payload.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /auth/me:
    get:
      tags: [Auth]
      summary: Retrieve the authenticated user profile.
      security:
        - accessTokenCookie: []
      responses:
        '200':
          description: Current session details.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    const: true
                  data:
                    $ref: '#/components/schemas/User'
        '401':
          description: Authentication required.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /pairing/recommend:
    post:
      tags: [Pairing]
      summary: Generate wine pairing recommendations.
      security:
        - accessTokenCookie: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [dish]
              properties:
                dish:
                  description: Dish description or structured context.
                  oneOf:
                    - type: string
                    - type: object
                      additionalProperties: true
                context:
                  type: object
                  additionalProperties: true
                guestPreferences:
                  type: object
                  additionalProperties: true
                options:
                  type: object
                  additionalProperties: true
      responses:
        '200':
          description: Successful pairing recommendations.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    const: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/PairingRecommendation'
                  meta:
                    type: object
                    properties:
                      learning_session_id:
                        type: string
        '400':
          description: Missing required information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Pairing generation failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /pairing/quick:
    post:
      tags: [Pairing]
      summary: Request expedited pairing suggestions.
      security:
        - accessTokenCookie: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                dish:
                  description: Dish description or structure.
                  oneOf:
                    - type: string
                    - type: object
                      additionalProperties: true
                context:
                  type: object
                  additionalProperties: true
                ownerLikes:
                  type: object
                  additionalProperties: true
      responses:
        '200':
          description: Quick pairing results.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    const: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/QuickPairing'
        '500':
          description: Unable to produce quick pairings.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /pairing/feedback:
    post:
      tags: [Pairing]
      summary: Record feedback for a pairing recommendation.
      security:
        - accessTokenCookie: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [recommendation_id, rating]
              properties:
                recommendation_id:
                  type: string
                rating:
                  type: number
                notes:
                  type: string
                selected:
                  type: boolean
      responses:
        '200':
          description: Feedback successfully captured.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    const: true
                  message:
                    type: string
        '400':
          description: Missing required identifiers.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Unable to record feedback.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /inventory:
    get:
      tags: [Inventory]
      summary: Retrieve a paginated list of inventory items.
      parameters:
        - in: query
          name: location
          schema:
            type: string
        - in: query
          name: wine_type
          schema:
            type: string
        - in: query
          name: region
          schema:
            type: string
        - in: query
          name: available_only
          schema:
            type: boolean
        - in: query
          name: limit
          schema:
            type: integer
        - in: query
          name: offset
          schema:
            type: integer
      responses:
        '200':
          description: Inventory listing.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    const: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/InventoryRecord'
                  meta:
                    $ref: '#/components/schemas/Pagination'
        '500':
          description: Failed to load inventory.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /inventory/stock:
    get:
      tags: [Inventory]
      summary: Retrieve current stock levels.
      parameters:
        - in: query
          name: location
          schema:
            type: string
        - in: query
          name: wine_type
          schema:
            type: string
        - in: query
          name: region
          schema:
            type: string
        - in: query
          name: available_only
          schema:
            type: boolean
      responses:
        '200':
          description: Stock information.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    const: true
                  data:
                    type: object
                    additionalProperties: true
        '500':
          description: Failed to retrieve stock information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /inventory/{id}:
    get:
      tags: [Inventory]
      summary: Fetch a specific inventory record.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Inventory record.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    const: true
                  data:
                    $ref: '#/components/schemas/InventoryRecord'
        '404':
          description: Inventory item not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Unable to load inventory item.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /locations:
    get:
      tags: [Inventory]
      summary: List storage locations.
      responses:
        '200':
          description: Available locations.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    const: true
                  data:
                    type: array
                    items:
                      type: string
        '500':
          description: Unable to load locations.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /inventory/consume:
    post:
      tags: [Inventory]
      summary: Record wine consumption.
      security:
        - accessTokenCookie: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [vintage_id, location, quantity]
              properties:
                vintage_id:
                  type: integer
                location:
                  type: string
                quantity:
                  type: number
                notes:
                  type: string
                created_by:
                  type: string
      responses:
        '200':
          description: Consumption recorded.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    const: true
                  data:
                    type: object
                    additionalProperties: true
        '400':
          description: Missing required fields.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Unable to record consumption.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /inventory/receive:
    post:
      tags: [Inventory]
      summary: Record incoming wine.
      security:
        - accessTokenCookie: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [vintage_id, location, quantity]
              properties:
                vintage_id:
                  type: integer
                location:
                  type: string
                quantity:
                  type: number
                unit_cost:
                  type: number
                reference_id:
                  type: string
                notes:
                  type: string
                created_by:
                  type: string
      responses:
        '200':
          description: Receipt recorded.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    const: true
                  data:
                    type: object
                    additionalProperties: true
        '400':
          description: Missing required fields.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Unable to record receipt.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /inventory/intake:
    post:
      tags: [Inventory]
      summary: Create an intake order.
      security:
        - accessTokenCookie: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: true
      responses:
        '200':
          description: Intake order created.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    const: true
                  data:
                    type: object
                    additionalProperties: true
        '400':
          description: Invalid intake request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Intake creation failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /inventory/intake/{intakeId}/receive:
    post:
      tags: [Inventory]
      summary: Mark items as received for an intake order.
      security:
        - accessTokenCookie: []
      parameters:
        - in: path
          name: intakeId
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [receipts]
              properties:
                receipts:
                  type: array
                  minItems: 1
                  items:
                    $ref: '#/components/schemas/IntakeReceipt'
                created_by:
                  type: string
                notes:
                  type: string
      responses:
        '200':
          description: Intake receipt processed.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    const: true
                  data:
                    type: object
                    additionalProperties: true
        '400':
          description: Invalid receipt payload.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Unable to process receipts.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /inventory/intake/{intakeId}/status:
    get:
      tags: [Inventory]
      summary: Retrieve intake completion status.
      parameters:
        - in: path
          name: intakeId
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Intake status information.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    const: true
                  data:
                    type: object
                    additionalProperties: true
        '404':
          description: Intake not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Unable to load intake status.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /inventory/move:
    post:
      tags: [Inventory]
      summary: Move wine between locations.
      security:
        - accessTokenCookie: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [vintage_id, from_location, to_location, quantity]
              properties:
                vintage_id:
                  type: integer
                from_location:
                  type: string
                to_location:
                  type: string
                quantity:
                  type: number
                notes:
                  type: string
                created_by:
                  type: string
      responses:
        '200':
          description: Movement recorded.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    const: true
                  data:
                    type: object
                    additionalProperties: true
        '400':
          description: Missing required fields.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Unable to record movement.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /inventory/reserve:
    post:
      tags: [Inventory]
      summary: Reserve wine for future service.
      security:
        - accessTokenCookie: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [vintage_id, location, quantity]
              properties:
                vintage_id:
                  type: integer
                location:
                  type: string
                quantity:
                  type: number
                notes:
                  type: string
                created_by:
                  type: string
      responses:
        '200':
          description: Reservation recorded.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    const: true
                  data:
                    type: object
                    additionalProperties: true
        '400':
          description: Missing required fields.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Unable to reserve inventory.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /inventory/ledger/{vintage_id}:
    get:
      tags: [Inventory]
      summary: Retrieve ledger history for a vintage.
      parameters:
        - in: path
          name: vintage_id
          required: true
          schema:
            type: integer
        - in: query
          name: limit
          schema:
            type: integer
        - in: query
          name: offset
          schema:
            type: integer
      responses:
        '200':
          description: Ledger entries.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    const: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/InventoryLedgerEntry'
        '500':
          description: Unable to load ledger history.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /procurement/opportunities:
    get:
      tags: [Procurement]
      summary: Analyze procurement opportunities.
      parameters:
        - in: query
          name: region
          schema:
            type: string
        - in: query
          name: regions
          schema:
            type: string
            description: Comma-delimited region list.
        - in: query
          name: wine_type
          schema:
            type: string
        - in: query
          name: wine_types
          schema:
            type: string
            description: Comma-delimited wine type list.
        - in: query
          name: max_price
          schema:
            type: number
        - in: query
          name: min_score
          schema:
            type: integer
        - in: query
          name: budget
          schema:
            type: number
      responses:
        '200':
          description: Procurement opportunities.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    const: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ProcurementOpportunity'
        '500':
          description: Unable to analyze procurement opportunities.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /procurement/analyze:
    post:
      tags: [Procurement]
      summary: Analyze a specific procurement decision.
      security:
        - accessTokenCookie: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [vintage_id, supplier_id]
              properties:
                vintage_id:
                  type: integer
                supplier_id:
                  type: integer
                quantity:
                  type: integer
                context:
                  type: object
                  additionalProperties: true
      responses:
        '200':
          description: Procurement analysis.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    const: true
                  data:
                    type: object
                    additionalProperties: true
        '400':
          description: Missing required fields.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Unable to analyze procurement decision.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /procurement/order:
    post:
      tags: [Procurement]
      summary: Generate a purchase order.
      security:
        - accessTokenCookie: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [items, supplier_id]
              properties:
                items:
                  type: array
                  minItems: 1
                  items:
                    type: object
                    additionalProperties: true
                supplier_id:
                  type: integer
                delivery_date:
                  type: string
                  format: date
                notes:
                  type: string
      responses:
        '200':
          description: Purchase order details.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    const: true
                  data:
                    $ref: '#/components/schemas/ProcurementOrder'
        '400':
          description: Missing required fields.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Unable to generate purchase order.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /wines:
    get:
      tags: [Wines]
      summary: Retrieve wines with optional filters.
      parameters:
        - in: query
          name: region
          schema:
            type: string
        - in: query
          name: wine_type
          schema:
            type: string
        - in: query
          name: producer
          schema:
            type: string
        - in: query
          name: search
          schema:
            type: string
        - in: query
          name: limit
          schema:
            type: integer
        - in: query
          name: offset
          schema:
            type: integer
      responses:
        '200':
          description: Wine catalog.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    const: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Wine'
        '500':
          description: Unable to load wines.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags: [Wines]
      summary: Add a new wine with vintage intelligence.
      security:
        - accessTokenCookie: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [wine, vintage, stock]
              properties:
                wine:
                  type: object
                  additionalProperties: true
                vintage:
                  type: object
                  additionalProperties: true
                stock:
                  type: object
                  additionalProperties: true
      responses:
        '201':
          description: Wine added to inventory.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    const: true
                  data:
                    $ref: '#/components/schemas/Wine'
                  message:
                    type: string
        '400':
          description: Missing required sections.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Unable to add wine.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /wines/{id}:
    get:
      tags: [Wines]
      summary: Retrieve a wine with detailed vintages and aliases.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Wine record with enrichments.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    const: true
                  data:
                    $ref: '#/components/schemas/Wine'
        '404':
          description: Wine not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Unable to load wine details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /vintage/analysis/{wine_id}:
    get:
      tags: [Vintage Intelligence]
      summary: Retrieve analysis for a wine.
      parameters:
        - in: path
          name: wine_id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Vintage analysis.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    const: true
                  data:
                    $ref: '#/components/schemas/VintageAnalysis'
        '404':
          description: Wine not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Unable to load analysis.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /vintage/enrich:
    post:
      tags: [Vintage Intelligence]
      summary: Enrich a wine record with the latest intelligence data.
      security:
        - accessTokenCookie: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [wine_id]
              properties:
                wine_id:
                  description: Identifier of the wine to enrich.
                  oneOf:
                    - type: integer
                    - type: string
      responses:
        '200':
          description: Enrichment completed successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    const: true
                  data:
                    type: object
                    additionalProperties: true
                  message:
                    type: string
        '400':
          description: Missing or invalid wine identifier.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Wine not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Unable to enrich wine data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /vintage/procurement-recommendations:
    get:
      tags: [Vintage Intelligence]
      summary: Retrieve procurement recommendations based on inventory gaps.
      responses:
        '200':
          description: Procurement recommendations.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    const: true
                  data:
                    type: array
                    items:
                      type: object
                      additionalProperties: true
        '500':
          description: Unable to load recommendations.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /vintage/batch-enrich:
    post:
      tags: [Vintage Intelligence]
      summary: Batch enrich wines with vintage intelligence.
      security:
        - accessTokenCookie: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                filters:
                  type: object
                  additionalProperties: true
                limit:
                  type: integer
      responses:
        '200':
          description: Batch enrichment results.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    const: true
                  data:
                    type: array
                    items:
                      type: object
                      additionalProperties: true
        '500':
          description: Unable to perform batch enrichment.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /vintage/pairing-insight:
    post:
      tags: [Vintage Intelligence]
      summary: Generate weather-based pairing insights for a wine and dish context.
      security:
        - accessTokenCookie: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [wine_id, dish_context]
              properties:
                wine_id:
                  type: integer
                dish_context:
                  type: object
                  additionalProperties: true
      responses:
        '200':
          description: Pairing insight generated.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    const: true
                  data:
                    type: object
                    additionalProperties: true
        '400':
          description: Missing required fields.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Wine not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Unable to generate pairing insight.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /system/health:
    get:
      tags: [System]
      summary: Application health check.
      responses:
        '200':
          description: System is healthy.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    const: true
                  status:
                    type: string
                  timestamp:
                    type: string
                    format: date-time
                  data:
                    type: object
                    additionalProperties: true
        '500':
          description: System health degraded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /system/activity:
    get:
      tags: [System]
      summary: Retrieve recent system activity.
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
      responses:
        '200':
          description: Activity events.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    const: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ActivityEvent'
        '500':
          description: Unable to load activity feed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /system/spec:
    get:
      tags: [System]
      summary: Retrieve the SommOS OpenAPI specification.
      responses:
        '200':
          description: OpenAPI document served as YAML.
          content:
            application/yaml:
              schema:
                type: string
        '500':
          description: Specification is unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'